@page "/"

@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.IO.Compression
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net;
@using System.Text.RegularExpressions

<h1 class="text-center mb-4">Wizard Search</h1>

<div class="d-flex justify-content-center">
    <div class="input-group mb-3 w-50">
        <input @bind="searchQuery" class="form-control" placeholder="Enter search query">
        <button class="btn btn-outline-secondary" @onclick="Search">Search</button>
    </div>
</div>

@if (searchResults != null && searchResults.Any())
{
    <div class="container">
        <div class="row">
            @foreach (var result in searchResults)
            {
                <div class="col-md-6 mb-3">
                    <div class="card h-100" style="border-radius: 10px;">
                        <div class="card-body">
                            <h5 class="card-title">
                                @{
                                    var faviconUrl = GetFaviconUrl(result.Url);
                                    <img src="@faviconUrl" onerror="this.onerror=null;this.src='https://placehold.co/16x16';" style="width: 16px; height: 16px; border-radius: 50%; vertical-align: middle;">
                                }
                                <a href="@result.Url" target="_blank">@CleanHtml(result.Title)</a>
                            </h5>
                            <p class="card-text">@CleanHtml(result.Description)</p>
                            <p class="card-text"><small class="text-muted">URL: @result.Url</small></p>
                            @if (!string.IsNullOrEmpty(result.PageAge))
                            {
                                <p class="card-text"><small class="text-muted">Page Age: @result.PageAge</small></p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <nav aria-label="Search results pages" class="mt-4">
        <ul class="pagination justify-content-center">
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <button class="page-link" @onclick="PreviousPage">Previous</button>
                </li>
            }
            <li class="page-item active"><span class="page-link">@currentPage</span></li>
            <li class="page-item">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
}
else if (searchQueryAttempted)
{
    <div class="text-center">No results found.</div>
}

@code {
    private string searchQuery;
    private List<SearchResult> searchResults;
    private bool searchQueryAttempted = false;
    private int currentPage = 1;
    private const int resultsPerPage = 20;
    private readonly HttpClient httpClient = new HttpClient();

    protected override void OnInitialized()
    {
        httpClient.BaseAddress = new Uri("https://api.search.brave.com/");
        httpClient.DefaultRequestHeaders.Accept.Clear();
        httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        httpClient.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue("gzip"));
    }

    private async Task Search()
    {
        searchQueryAttempted = true;
        searchResults = null;

        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        httpClient.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue("gzip"));
        httpClient.DefaultRequestHeaders.Add("X-Subscription-Token", "BSAc-pd1ysk-2LYFAyI2LQWLf2HZ5F7");

        int offset = (currentPage - 1) * resultsPerPage;
        var requestUri = $"res/v1/web/search?q={Uri.EscapeDataString(searchQuery)}&count={resultsPerPage}&offset={offset}";

        try
        {
            var response = await httpClient.GetAsync(requestUri);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStreamAsync();
                var jsonResponse = await new StreamReader(new GZipStream(stream, CompressionMode.Decompress)).ReadToEndAsync();
                var searchResponse = JsonSerializer.Deserialize<BraveSearchResponse>(jsonResponse);
                searchResults = searchResponse?.Web?.Results;
            }
            else
            {
                Console.WriteLine($"API call unsuccessful: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during API call: {ex.Message}");
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await Search();
        }
    }

    private async Task NextPage()
    {
        currentPage++;
        await Search();
    }

    private string GetFaviconUrl(string url)
    {
        try
        {
            var uri = new Uri(url);
            return $"{uri.Scheme}://{uri.Host}/favicon.ico";
        }
        catch
        {
            return "";
        }
    }

    private string CleanHtml(string value)
    {
        var decoded = WebUtility.HtmlDecode(value);
        return Regex.Replace(decoded, "<.*?>", String.Empty);
    }

    public class BraveSearchResponse
    {
        [JsonPropertyName("web")]
        public WebSearch Web { get; set; }
    }

    public class WebSearch
    {
        [JsonPropertyName("results")]
        public List<SearchResult> Results { get; set; }
    }

    public class SearchResult
    {
        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("url")]
        public string Url { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("page_age")]
        public string PageAge { get; set; }
    }
}