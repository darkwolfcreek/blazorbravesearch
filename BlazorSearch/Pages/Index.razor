@page "/"

@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.IO.Compression
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net;
@using System.Text.RegularExpressions

<h1 class="text-center mb-4">Wizard Search</h1>

<div class="d-flex justify-content-center">
    <div class="input-group mb-3 w-50">
        <input @bind="searchQuery" class="form-control" placeholder="Enter search query">
        <button class="btn btn-outline-secondary" @onclick="Search">Search</button>
    </div>
</div>

<div class="d-flex justify-content-center mb-3">
    @foreach (var buttonLabel in buttonOptions)
    {
        <button class="btn btn-secondary me-2" @onclick="() => SearchWithPrefix(buttonLabel)">@buttonLabel</button>
    }
</div>

@if (searchResults != null && searchResults.Any())
{
    <div class="container">
        <div class="row">
            @foreach (var result in searchResults)
            {
                <div class="col-md-6 mb-3">
                    <div class="card h-100" style="border-radius: 10px;">
                        <div class="card-body">
                            <h5 class="card-title">
                                @{
                                    var faviconUrl = GetFaviconUrl(result.Url);
                                    <img src="@GetFaviconUrl(result.Url, 16)" onerror="this.onerror=null;this.src='https://placehold.co/16x16';" style="width: 16px; height: 16px; border-radius: 50%; vertical-align: middle;">
                                }
                                <a href="@result.Url" target="_blank">@CleanHtml(result.Title)</a>
                            </h5>
                            <p class="card-text">@CleanHtml(result.Description)</p>
                            <p class="card-text"><small class="text-muted">URL: @result.Url</small></p>
                            @if (!string.IsNullOrEmpty(result.PageAge))
                            {
                                <p class="card-text"><small class="text-muted">Page Age: @result.PageAge</small></p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else if (searchQueryAttempted)
{
    <div class="text-center">No results found.</div>
}

@code {
    private string searchQuery;
    private List<SearchResult> searchResults;
    private bool searchQueryAttempted = false;
    private readonly HttpClient httpClient = new HttpClient();

    private readonly string[] buttonOptions = new string[] { "Item", "Spell", "Quest", "PetAbility", "NPC", "Mount", "Location", "Jewel", "House", "Fish", "Creature", "ItemCard", "TreasureCard", };

    private readonly string[] whitelist = new string[] { "wizard101central.com", };

    protected override void OnInitialized()
    {
        httpClient.BaseAddress = new Uri("https://api.search.brave.com/");
        httpClient.DefaultRequestHeaders.Accept.Clear();
        httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        httpClient.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue("gzip"));
    }

    private async Task SearchWithPrefix(string prefix)
    {
        searchQueryAttempted = true;
        searchResults = new List<SearchResult>();

        string queryWithPrefix = $"{prefix}:";
        Console.WriteLine($"Searching with prefix: {queryWithPrefix}");

        foreach (var domain in whitelist)
        {
            string combinedQuery = $"{queryWithPrefix} site:{domain}";
            await PerformSearch(combinedQuery);
        }

        if (!searchResults.Any())
        {
            searchResults = null;
        }
    }

    private async Task Search()
    {
        searchQueryAttempted = true;
        searchResults = null;

        Console.WriteLine($"Searching with query: {searchQuery}");
        await PerformSearch(searchQuery);

        if (searchResults == null || !searchResults.Any())
        {
            foreach (var domain in whitelist)
            {
                string combinedQuery = $"{searchQuery} site:{domain}";
                await PerformSearch(combinedQuery);
            }
        }
    }

    private async Task PerformSearch(string query)
    {
        Console.WriteLine($"Performing search for: {query}");

        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        httpClient.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue("gzip"));
        httpClient.DefaultRequestHeaders.Add("X-Subscription-Token", "BSAc-pd1ysk-2LYFAyI2LQWLf2HZ5F7");

        var requestUri = $"res/v1/web/search?q={Uri.EscapeDataString(query)}";

        try
        {
            var response = await httpClient.GetAsync(requestUri);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStreamAsync();
                var jsonResponse = await new StreamReader(new GZipStream(stream, CompressionMode.Decompress)).ReadToEndAsync();
                var searchResponse = JsonSerializer.Deserialize<BraveSearchResponse>(jsonResponse);

                if (searchResponse?.Web?.Results != null)
                {
                    searchResults = searchResponse.Web.Results
                        .Where(result => whitelist.Any(domain => new Uri(result.Url).Host.Contains(domain)))
                        .ToList();
                }
            }
            else
            {
                Console.WriteLine($"API call unsuccessful: {response.ReasonPhrase}");
                // You may want to handle different HTTP status codes differently
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during API call: {ex.Message}");
            // Implement error handling logic as needed
        }
    }

    private string GetFaviconUrl(string url, int size = 24)
    {
        try
        {
            var uri = new Uri(url);
            return $"https://www.google.com/s2/favicons?domain={uri.Host}&sz={size}";
        }
        catch
        {
            return "https://placehold.co/16x16";
        }
    }

    private string CleanHtml(string value)
    {
        var decoded = WebUtility.HtmlDecode(value);
        return Regex.Replace(decoded, "<.*?>", String.Empty);
    }

    public class BraveSearchResponse
    {
        [JsonPropertyName("web")]
        public WebSearch Web { get; set; }
    }

    public class WebSearch
    {
        [JsonPropertyName("results")]
        public List<SearchResult> Results { get; set; }
    }

    public class ImageSearchApiResponse
    {
        public List<ImageResult> Results { get; set; }
    }

    public class ImageResult
    {
        public string Url { get; set; }
        // Add other necessary properties from the API response
    }

    public class SearchResult
    {
        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("url")]
        public string Url { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("page_age")]
        public string PageAge { get; set; }

        // New property for image URL
        public string ImageUrl { get; set; }
    }
}
